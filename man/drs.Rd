% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drs.R
\name{drs}
\alias{drs}
\alias{drs_stat}
\alias{drs_access_url}
\alias{drs_cp}
\alias{drs_hub}
\title{DRS (Data Repository Service) URL management}
\usage{
drs_stat(source = character(), region = "US")

drs_access_url(source = character(), region = "US")

drs_cp(source, destination, ..., overwrite = FALSE)

drs_hub(source = character())
}
\arguments{
\item{source}{\code{character()} DRS URLs (beginning with 'drs://') to resources
managed by either the 'martha' DRS resolution server (\code{drs_stat()},
\code{drs_access_url()}, \code{drs_cp()}) or the DRS Hub server (\code{drs_hub()}).}

\item{region}{\code{character(1)} Google cloud 'region' in which the DRS resource
is located. Most data is located in \code{"US"} (the default); in principle
\code{"auto"} allows for discovery of the region, but sometimes fails.
Regions are enumerated at
\url{https://cloud.Google.com/storage/docs/locations#available-locations}.}

\item{destination}{\code{character(1)}, Google cloud bucket or local
file system destination path.}

\item{...}{additional arguments, passed to \code{avcopy()} for file
copying.}

\item{overwrite}{logical(1) indicating that source \code{fileName}s
present in \code{destination} should downloaded again.}
}
\value{
\code{drs_stat()} returns a tbl with the following columns:
\itemize{
\item \code{fileName}: \code{character()} (resolver sometimes returns null).
\item \code{size}: integer() (resolver sometimes returns null).
\item \code{contentType}: \code{character()} (resolver sometimes returns null).
\item \code{gsUri}: \code{character()} (resolver sometimes returns null).
\item \code{timeCreated}: \code{character()} (the time created formatted using ISO
8601; resolver sometimes returns null).
\item \code{timeUpdated}: \code{character()} (the time updated formatted using ISO
8601; resolver sometimes returns null).
\item \code{bucket}: \code{character()} (resolver sometimes returns null).
\item \code{name}: \code{character()} (resolver sometimes returns null).
\item \code{googleServiceAccount}: list() (null unless the DOS url belongs to
a Bond supported host).
\item \code{hashes}: list() (contains the hashes type and their checksum
value; if unknown. it returns null)
}

\code{drs_hub()} returns a tbl with the following columns:
\itemize{
\item \code{drs}: \code{character()} DRS URIs
\item \code{bucket}: \code{character()} Google cloud bucket
\item \code{name}: \code{character()} object name in \code{bucket}
\item \code{size}: numeric() object size in bytes
\item \code{timeCreated}: \code{character()} object creation time
\item \code{timeUpdated}: \code{character()} object update time
\item \code{fileName}: \code{character()} local file name
\item \code{accessUrl}: \code{character()} signed URL for object access
}

\code{drs_access_url()} returns a vector of https URLs
corresponding to the vector of DRS URIs provided as inputs to
the function.

\code{drs_cp()} returns a tibble like \code{drs_stat()}, but with
additional columns
\itemize{
\item simple: logical() value indicating whether resolution used a
simple signed URL (\code{TRUE}) or auxilliary service account.
\item destination: \code{character()} full path to retrieved object(s)
}
}
\description{
\code{drs_stat()} resolves zero or more DRS URLs to their Google
bucket location using the Martha V3 API endpoint.

\code{drs_access_url()} returns a vector of 'signed' URLs
that allow access to restricted resources via standard https
protocols.

\code{drs_cp()} copies 0 or more DRS URIs to a Google
bucket or local folder

\code{drs_hub()} resolves zero or more DRS URLs to their Google bucket
location using the DRS Hub API endpoint.
}
\section{drs_stat()}{

\code{drs_stat()} sends requests in parallel to the DRS
server, using 8 forked processes (by default) to speed up queries. Use
\code{options(mc.cores = 16L)}, for instance, to set the number of processes to
use.

\code{drs_stat()} uses the AnVIL 'pet' account associated with a
runtime. The pet account is discovered by default when evaluated on
an AnVIL runtime (e.g., in RStudio or a Jupyter notebook in the
AnVIL), or can be found in the return value of \code{avruntimes()}.

Errors reported by the DRS service are communicated to the user,
but can be cryptic. The DRS service itself for \code{drs_stat} is called
'martha'. Errors mentioning martha might commonly involve a
mal-formed DRS URI. Martha uses a service called 'bond' to
establish credentials with registered third party entities such as
Kids First. Errors mentioning bond might involve absence of
credentials, within Terra, to access the resource; check that, in
the Terra / AnVIL graphical user interface, the user profiles
'External Entities' includes the organization to which the DRS uri
is being resolved.
}

\section{drs_hub()}{

\code{drs_hub()} uses the DRS Hub API endpoint to resolve a single or
multiple DRS URLs to their Google bucket location. The DRS Hub API
endpoint requires a \code{gcloud_access_token()}. The DRS Hub API service
is hosted at \url{https://drshub.dsde-prod.broadinstitute.org}.
}

\examples{
drs <- c(
    vcf = "drs://dg.ANV0/6f633518-f2de-4460-aaa4-a27ee6138ab5",
    tbi = "drs://dg.ANV0/4fb9e77f-c92a-4deb-ac90-db007dc633aa"
)

if (gcloud_exists() && startsWith(gcloud_account(), "pet-")) {
    ## from within AnVIL
    tbl <- drs_stat(uri)
    urls <- drs_access_url(uri)
    ## library(VariantAnnotation)
    ## vcffile <- VcfFile(urls[["vcf"]], urls[["tbi"]])
    ##
    ## header <- scanVcfHeader(vcffile)
    ## meta(header)[["contig"]]
}

if (gcloud_exists() && interactive()) {
    drs_urls <- c(
        "drs://drs.anv0:v2_b3b815c7-b012-37b8-9866-1cb44b597924",
        "drs://drs.anv0:v2_2823eac3-77ae-35e4-b674-13dfab629dc5",
        "drs://drs.anv0:v2_c6077800-4562-30e3-a0ff-aa03a7e0e24f"
    )
    drs_hub(drs_urls)
}
}
